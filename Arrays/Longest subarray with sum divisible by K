class Solution {
    int longestSubarrayDivK(int[] arr, int k) {
        int n = arr.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1); // For subarrays starting at index 0
        int sum = 0;
        int max_length = 0;

        for (int i = 0; i < n; i++) {
            sum += arr[i];
            int rem = ((sum % k) + k) % k; // Handle negative remainders

            if (map.containsKey(rem)) {
                int len = i - map.get(rem);
                max_length = Math.max(max_length, len);
            } else {
                map.put(rem, i); // Store only the first occurrence
            }
        }

        return max_length;
    }
}
