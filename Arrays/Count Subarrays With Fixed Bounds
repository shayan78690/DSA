class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
        int n = nums.length;
        long count = 0;
        Deque<Integer> minDeq = new LinkedList<>();
        Deque<Integer> maxDeq = new LinkedList<>();
        int left = 0;
        int right = 0;
        while (right < n) {
            if (nums[right] < minK || nums[right] > maxK) {
                minDeq.clear();
                maxDeq.clear();
                left = right + 1;
                right++;
                continue;
            }
            while (!maxDeq.isEmpty() && nums[right] >= nums[maxDeq.peekLast()]) {
                maxDeq.pollLast();
            }
            maxDeq.addLast(right);
            while (!minDeq.isEmpty() && nums[right] <= nums[minDeq.peekLast()]) {
                minDeq.pollLast();
            }
            minDeq.addLast(right);

            if (nums[minDeq.peekFirst()] == minK && nums[maxDeq.peekFirst()] == maxK) {
                int start = Math.min(minDeq.peekFirst(), maxDeq.peekFirst());
                count += (start - left + 1);
            }
            right++;
        }
        return count;
    }
}











class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
        int n = nums.length;
        int count = 0;
        for(int i = 0; i < n; i++) {
            int mini = Integer.MAX_VALUE;
            int maxi = Integer.MIN_VALUE;
            for(int j = i; j < n; j++) {
                mini = Math.min(nums[j], mini);
                maxi = Math.max(nums[j], maxi);
                if(mini == minK && maxi == maxK) count++;
            }
        }
        return count;
    }
}
