class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int count = 0;
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += nums[i];

            int rem = sum - goal;
            if(map.containsKey(rem)) {
                count += map.get(rem);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}







class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        return func(nums, goal) - func(nums, goal - 1);
    }

    public int func(int nums[], int goal) {
        if (goal < 0)
            return 0;
        int n = nums.length;
        int left = 0;
        int right = 0;
        int count = 0;
        int sum = 0;
        while (right < n) {
            sum += nums[right];

            while (sum > goal) {
                sum -= nums[left];
                left++;
            }

            count += (right - left + 1);

            right++;
        }
        return count;
    }
}
