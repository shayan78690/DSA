class Solution {
    public int[][] matrixBlockSum(int[][] mat, int k) {
        int n = mat.length;
        int m = mat[0].length;
        int prefix[][] = new int[n][m];
        prefix = mat;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < m; j++) {
                prefix[i][j] = mat[i][j] + prefix[i][j - 1];
            }
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                prefix[i][j] = mat[i][j] + prefix[i - 1][j];
            }
        }

        int ans[][] = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int r1 = Math.max(0, i - k);
                int c1 = Math.max(0, j - k);
                int r2 = Math.min(n - 1, i + k);
                int c2 = Math.min(m - 1, j + k);

                int total = prefix[r2][c2];
                int left = c1 > 0 ? prefix[r2][c1 - 1] : 0;
                int top = r1 > 0 ? prefix[r1 - 1][c2] : 0;
                int overlap = r1 > 0 && c1 > 0 ? prefix[r1 - 1][c1 - 1] : 0;

                ans[i][j] = total - left - top + overlap;
            }
        }
        return ans;
    }
}
