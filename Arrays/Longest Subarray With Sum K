public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        int n = a.length;
        long sum = 0;
        int left = 0;
        int maxLen = 0;
        for(int right = 0; right < n; right++) {
            sum += a[right];
            while(sum > k) {
                sum -= a[left];
                left++;
            }
            if(sum == k) {
                maxLen = Math.max(maxLen, right-left+1);
            }
        }
        return maxLen;
    }
}








public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        int n = a.length;
        int maxLen = 0;
        for(int i = 0; i < n; i++) {
            long sum = 0;
            for(int j = i; j < n; j++) {
                sum += a[j];
                if(sum == k) {
                    maxLen = Math.max(maxLen, j-i+1);
                }
            }
        }
        return maxLen;
    }
}









public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        int n = a.length;
        int maxLen = 0;
        for(int i = 0; i < n; i++) {
            for(int j = i; j < n; j++) {
                long sum = 0;
                for(int p = i; p <= j; p++) {
                    sum += a[p];
                }
                if(sum == k) {
                    maxLen = Math.max(maxLen, j-i+1);
                }
            }
        }
        return maxLen;
    }
}
