class Solution {
    // Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        int n = a.length;
        int m = b.length;
        int i = 0;
        int j = 0;
        ArrayList<Integer> list = new ArrayList<>();
        
        while(i < n && j < m) {
            if(a[i] <= b[j]) {
                if(list.size() == 0 || list.get(list.size()-1) != a[i]) {
                    list.add(a[i]);
                }
                i++;
            } else {
                if(list.size() == 0 || list.get(list.size()-1) != b[j]) {
                    list.add(b[j]);
                }
                j++;
            }
        }
        
        while(i < n) {
            if(list.size() == 0 || list.get(list.size()-1) != a[i]) {
                list.add(a[i]);
            }
            i++;
        }
        
        while(j < m) {
            if(list.size() == 0 || list.get(list.size()-1) != b[j]) {
                list.add(b[j]);
            }
            j++;
        }
        
        return list;
    }
}











class Solution {
    // Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        HashSet<Integer> set = new HashSet<>();
        int n = a.length;
        int m = b.length;
        for(int i = 0; i < n; i++) {
            set.add(a[i]);
        }
        for(int i = 0; i < m; i++) {
            set.add(b[i]);
        }
        ArrayList<Integer> list = new ArrayList<>();
        for(Integer it : set) {
            list.add(it);
        }
        return list;
    }
}




