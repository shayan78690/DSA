/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */

class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak = findPeakElement(mountainArr);
        int leftHalf = binarySearchOnLeft(mountainArr, target, 0, peak);
        if (leftHalf == -1) {
            return binarySearchOnRight(mountainArr, target, peak + 1, mountainArr.length() - 1);
        }
        return leftHalf;
    }

    public int findPeakElement(MountainArray mountainArr) {
        int left = 1;
        int right = mountainArr.length() - 2;
        while (left <= right) {
            int mid = (left + right) / 2;
            int leftVal = mountainArr.get(mid - 1);
            int rightVal = mountainArr.get(mid + 1);
            int midVal = mountainArr.get(mid);
            if (midVal > leftVal && midVal > rightVal)
                return mid;
            else if (midVal > leftVal)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return -1;
    }

    public int binarySearchOnLeft(MountainArray mountainArr, int target, int left, int right) {
        while (left <= right) {
            int mid = (left + right) / 2;
            if (mountainArr.get(mid) == target)
                return mid;
            else if (mountainArr.get(mid) < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return -1;
    }

    public int binarySearchOnRight(MountainArray mountainArr, int target, int left, int right) {
        while (left <= right) {
            int mid = (left + right) / 2;
            int val = mountainArr.get(mid);
            if (val == target)
                return mid;
            else if (val > target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return -1;
    }

}
