class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int n = piles.length;
        int maxi = findMaxi(piles);
        int low = 1;
        int high = maxi;

        int ans = maxi;
        while (low <= high) {
            int mid = (low + high) / 2;
            int reqTime = calculateTime(piles, mid);
            if (reqTime <= h) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    public int calculateTime(int arr[], int k) {
        int totalTime = 0;
        for (int i = 0; i < arr.length; i++) {
            totalTime += Math.ceil((double) arr[i] / (double) k);
        }
        return totalTime;
    }

    public int findMaxi(int arr[]) {
        int maxi = Integer.MIN_VALUE;
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            maxi = Math.max(maxi, arr[i]);
        }
        return maxi;
    }
}
