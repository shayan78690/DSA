class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;
        int mini = Integer.MAX_VALUE;
        int maxi = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            mini = Math.min(mini, bloomDay[i]);
            maxi = Math.max(maxi, bloomDay[i]);
        }
        int ans = -1;
        int low = mini;
        int high = maxi;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (possible(bloomDay, m, k, mid)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }

    public boolean possible(int arr[], int m, int k, int day) {
        int adjCount = 0;
        int boqCount = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= day) {
                adjCount++;
            } else {
                boqCount += Math.floor(adjCount / k);
                adjCount = 0;
            }
        }
        boqCount += Math.floor(adjCount / k);
        return boqCount >= m;
    }
}
