


import java.util.*;

public class tUf {
    public static double median(int[] a, int[] b) {
        int n1 = a.length, n2 = b.length;
        //if n1 is bigger swap the arrays:
        if (n1 > n2) return median(b, a);

        int n = n1 + n2; //total length
        int left = (n1 + n2 + 1) / 2; //length of left half
        //apply binary search:
        int low = 0, high = n1;
        while (low <= high) {
            int mid1 = (low + high) / 2;
            int mid2 = left - mid1;
            //calculate l1, l2, r1 and r2;
            int l1 = (mid1 > 0) ? a[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? b[mid2 - 1] : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? a[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? b[mid2] : Integer.MAX_VALUE;

            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 1) return Math.max(l1, l2);
                else return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;
            } else if (l1 > r2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        return 0; //dummy statement
    }

    public static void main(String[] args) {
        int[] a = {1, 4, 7, 10, 12};
        int[] b = {2, 3, 6, 15};
        System.out.println("The median of two sorted arrays is " + median(a, b));
    }
}


















class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int i = 0;
        int j = 0;
        int len = (n + m);
        int ind2 = len / 2;
        int ind1 = ind2 - 1;
        int count = 0;
        int indel1 = -1;
        int indel2 = -1;
        while (i < n && j < m) {
            if (nums1[i] < nums2[j]) {
                if (count == ind1)
                    indel1 = nums1[i];
                if (count == ind2)
                    indel2 = nums1[i];
                count++;
                i++;
            } else {
                if (count == ind1)
                    indel1 = nums2[j];
                if (count == ind2)
                    indel2 = nums2[j];
                count++;
                j++;
            }
        }

        while (i < n) {
            if (count == ind1)
                indel1 = nums1[i];
            if (count == ind2)
                indel2 = nums1[i];
            count++;
            i++;
        }

        while (j < m) {
            if (count == ind1)
                indel1 = nums2[j];
            if (count == ind2)
                indel2 = nums2[j];
            count++;
            j++;
        }

        if (len % 2 != 0) {
            return (double) indel2;
        }
        return (double) ((double) (indel1 + indel2)) / 2.0;
    }
}









class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        ArrayList<Integer> arr = new ArrayList<>();
        int i = 0;
        int j = 0;

        while (i < n && j < m) {
            if (nums1[i] <= nums2[j]) {
                arr.add(nums1[i++]);
            } else {
                arr.add(nums2[j++]);
            }
        }
        while (i < n) {
            arr.add(nums1[i++]);
        }
        while (j < m) {
            arr.add(nums2[j++]);
        }

        int len = n + m;
        if (len % 2 != 0) {
            return (double) arr.get(len / 2);
        }
        return ((double) arr.get(len / 2) + (double) arr.get(len / 2 - 1)) / 2.0;
    }
}
