class Solution {
    class Pair implements Comparable<Pair> {
        char ch;
        int freq;

        Pair(char ch, int freq) {
            this.ch = ch;
            this.freq = freq;
        }

        @Override
        public int compareTo(Pair that) {
            return that.freq - this.freq;
        }
    }

    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (char ch : s.toCharArray()) {
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            char ch = entry.getKey();
            int freq = entry.getValue();
            pq.offer(new Pair(ch, freq));
        }

        StringBuilder ans = new StringBuilder();
        while (pq.size() > 0) {
            Pair p = pq.poll();
            while (p.freq > 0) {
                ans.append(p.ch);
                p.freq--;
            }
        }
        return ans.toString();
    }
}
