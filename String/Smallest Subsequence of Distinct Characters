class Solution {
    public String smallestSubsequence(String s) {
        int n = s.length();
        HashSet<Character> set = new HashSet<>();
        HashMap<Character, Integer> map = new HashMap<>();
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < n; i++) {
            map.put(s.charAt(i), i);
        }

        for(int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if(set.contains(ch)) continue;
            while(!stack.isEmpty() && stack.peek() > ch && map.get(stack.peek()) > i) {
                set.remove(stack.pop());
            }
            set.add(ch);
            stack.push(ch);
        }
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.reverse().toString();
    }
}
